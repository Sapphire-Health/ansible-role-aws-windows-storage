---
- name: Show EC2 volume info
  ansible.builtin.debug:
    msg: "{{ inventory_hostname_short }}"
  delegate_to: localhost
  vars:
    ansible_connection: local
- name: Get EC2 instance info
  amazon.aws.ec2_instance_info:
    filters:
      "tag:Name": "{{ inventory_hostname_short }}"
      instance-state-name: ["running"]
    region: "{{ hostvars[inventory_hostname].placement.region }}"
  register: ec2_instance
  delegate_to: localhost
  vars:
    ansible_connection: local
- name: Show EC2 instance info
  ansible.builtin.debug:
    msg: "{{ ec2_instance.instances[0].instance_id }}"
  delegate_to: localhost
  vars:
    ansible_connection: local
- name: Make sure one instance was returned
  ansible.builtin.fail:
    msg: "No instance found for {{ inventory_hostname_short }}"
  when: ec2_instance.instances | length == 0 or ec2_instance.instances | length > 1
  delegate_to: localhost
  vars:
    ansible_connection: local
- name: Gather EC2 volume info
  amazon.aws.ec2_vol_info:
    filters:
      attachment.instance_id: "{{ ec2_instance.instances[0].instance_id }}"
    region: "{{ hostvars[inventory_hostname].placement.region }}"
  register: ec2_vol_info
  delegate_to: localhost
  vars:
    ansible_connection: local
- name: Get volume name to path
  ansible.builtin.set_fact:
    vol_name_to_id: "{{ vol_name_to_id | default({}) | combine({item.tags.ansible_key: vol_name}) }}"
  vars:
    vol_name: "{{ item.id | replace('-', '') }}"
    ansible_connection: local
  delegate_to: localhost
  when: item.tags and "ansible_key" in item.tags.keys()
  loop: "{{ ec2_vol_info.volumes }}"
- name: Show vol_name_to_id
  ansible.builtin.debug:
    msg: "{{ vol_name_to_id }}"
  delegate_to: localhost
  vars:
    ansible_connection: local
- name: Get disk facts
  community.windows.win_disk_facts:
  register: windows_disks
- name: Get volume id to disk id
  ansible.builtin.set_fact:
    vol_id_win_disk_id: "{{ vol_id_win_disk_id | default({}) | combine({vol_name[0]: disk.number | int}) }}"
  vars:
    vol_name: "{{ disk.serial_number | split('_') }}"
    ansible_connection: local
  delegate_to: localhost
  # when: disk.partition_count == 0
  loop: "{{ windows_disks.ansible_facts.ansible_disks }}"
  loop_control:
    loop_var: disk
- name: Show vol_id_win_disk_id
  ansible.builtin.debug:
    msg: "{{ vol_id_win_disk_id }}"
  delegate_to: localhost
  vars:
    ansible_connection: local
- name: Show disk information
  ansible.builtin.debug:
    msg: "{{ item.key }} - {{ item.value }}"
  loop: "{{ volumes | dict2items }}"
  delegate_to: localhost
  vars:
    ansible_connection: local
# - name: Initialize disks
#   community.windows.win_initialize_disk:
#     disk_number: "{{ vol_id_win_disk_id[vol_name_to_id[item.key]] }}"
#     style: "{{ aws_windows_storage_default_style }}"
#   loop: "{{ volumes | dict2items }}"
# - name: Partition disks
#   community.windows.win_partition:
#     drive_letter: "{{ item.value.letter }}"
#     disk_number: "{{ vol_id_win_disk_id[vol_name_to_id[item.key]] }}"
#     partition_size: -1
#     gpt_type: "{{ aws_windows_storage_default_gpt_type }}"
#   loop: "{{ volumes | dict2items }}"
# - name: Format disks
#   community.windows.win_format:
#     drive_letter: "{{ item.value.letter }}"
#     new_label: "{{ item.key }}"
#     file_system: "{{ aws_windows_storage_default_file_system }}"
#   loop: "{{ volumes | dict2items }}"
# this task is required because of this https://github.com/ansible-collections/community.windows/issues/147#issuecomment-1989425640
# regarding the following task. I expect it to be fixed in a future release of the community.windows collection
# TODO: remove this task and test if the following task works without it when a new release
# of community.windows collection > 2.3.0 is available
# - name: Ensure the required NuGet package provider version is installed
#   ansible.windows.win_shell: Find-PackageProvider -Name Nuget -ForceBootstrap -IncludeDependencies -Force
# Load required powershell modules
- name: Check for StorageDsc DSC Powershell module
  community.windows.win_psmodule:
    name: "StorageDsc"
    accept_license: true
    state: present
- name: Provision disks with drive letters
  ansible.windows.win_dsc:
    resource_name: Disk
    DiskId: "{{ vol_id_win_disk_id[vol_name_to_id[volume.key]] }}"
    # DiskIdType: 'UniqueId'
    AllocationUnitSize: "{{ volume.value.AllocationUnitSize | default(omit) }}"
    AllowDestructive: "{{ volume.value.AllowDestructive | default(false) }}"
    PartitionStyle: "{{ volume.value.PartitionStyle | default('GPT') }}"
    Size: "{{ volume.value.Size | default(omit) }}"
    DriveLetter: "{{ volume.value.DriveLetter }}"
    FSLabel: "{{ volume.key }}"
    FSFormat: "{{ volume.value.FSFormat | default('NTFS') }}"
  when: volume.value.DriveLetter is defined
  loop: "{{ volumes | dict2items }}"
  loop_control:
    loop_var: volume
- name: Create directories for access paths (mount points)
  ansible.windows.win_file:
    path: "{{ mount_point.value.AccessPath }}"
    state: directory
  when: mount_point.value.AccessPath is defined
  loop: "{{ volumes | dict2items }}"
  loop_control:
    loop_var: mount_point
- name: Provision disks with access paths
  ansible.windows.win_dsc:
    resource_name: DiskAccessPath
    DiskId: "{{ vol_id_win_disk_id[vol_name_to_id[volume.key]] }}"
    # DiskIdType: 'UniqueId'
    AllocationUnitSize: "{{ volume.value.AllocationUnitSize | default(omit) }}"
    Size: "{{ volume.value.Size | default(omit) }}"
    AccessPath: "{{ volume.value.AccessPath }}"
    FSLabel: "{{ volume.key }}"
    FSFormat: "{{ volume.value.FSFormat | default('NTFS') }}"
  when: volume.value.AccessPath is defined
  loop: "{{ volumes | dict2items }}"
  loop_control:
    loop_var: volume
